<% @TinyPG Namespace="tccdotnet" Language="csharp" %>
DIRECTIVE	-> @"<.+?>";
DATATYPE	-> @"float|double|u?int|char|u?longlong|u?long|u?short";
INCLUDE	-> @"include";
VOID		-> @"void";
SWITCH		-> @"switch";
CASE		-> @"case";
IF 		-> @"if";
ELSE		-> @"else";
FOR		-> @"for";
WHILE		-> @"while";
DEFAULT	-> @"default";
RETURN		-> @"return";
PRINTF		-> @"printf";
SCANF		-> @"scanf";
DO		-> @"do";
GETCH		 -> @"getch"; 
CLRSCR		 -> @"clrscr";
BREAK         -> @"break";
//POINTER	-> @"\*";
TYPESPEC	-> @"@?\""%[dfsc]\""";
REFOPER	-> @"&";
IDENTIFIER   	-> @"[a-zA-Z_][a-zA-Z0-9_]*";
CHARVALUE	-> @"(([a-zA-Z_][a-zA-Z_]|[0-9_][0-9_])|([a-zA-Z_][0-9_])|([0-9_][a-zA-Z_]))|([a-zA-Z_]|[0-9_])";
//ARTOPERATOR	-> @"\+|-|%|/|\*";
PLUS		-> @"\+";
MINUS		-> @"-";
ASTERISK	-> @"\*";
FSLASH		-> @"/";
PERCENT	-> @"%";
NUMBER		-> @"[0-9]+";
QUOT		-> @"\'";
DQUOT		-> @"\""";
COMMA		-> @",";
EQUALS		-> @"=";
SEMICOL	-> @";";
COLON		-> @":";
SHARP 		-> @"#";
EOF		-> @"^$";
LPAREN		-> @"\(";
RPAREN		-> @"\)";
LBRACE		-> @"\{";
RBRACE		-> @"\}";
LARRAY		-> @"\[";
RARRAY		-> @"\]";
RELOP	       -> @">=|<=|==|!=|>|<";
LOGOP		-> @"&&|\|\|";
INCREDECRE	-> @"\+\+|\-\-";
BOOL		-> @"true|false";
NOT		-> @"!";
NULL		-> @"";
STRING        -> @"@?\""(\""\""|[^\""])*\""";
VARIABLEPARAMS -> @"\.\.\.";


[Skip]
WHITESPACE  	-> @"\s+";
[Skip]
EOL		-> @"[\n\r]";
[Skip]
COMMENTLINE  	-> @"//[^\n]*\n?";
[Skip]
COMMENTBLOCK 	-> @"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/";

/* === C-language CFG === */
//Assuming no functions could be called outside functions
Start 		 -> Header* GlobalDecl* EOF;

/* Pre-processor directives */
Header 	 -> SHARP INCLUDE DIRECTIVE;

/*
 * Global declaration includes all declarations made outside functions.
 * -- Types: Variable, function, and function prototype declaration
 */

GlobalDecl 	 -> (DATATYPE|VOID)? Pointer? IDENTIFIER (Function? | (Array|DecAssignment)? (COMMA Pointer? IDENTIFIER Array? DecAssignment?)* SEMICOL);

/* Pointer. Double-referencing pointer is possible in C */
Pointer	-> ASTERISK+;

/* 
 * Arithmetic operators. 
 * -- Types: Add, Subtract, Multiply, Divide, Modulus 
 */
ArithmeticOperator -> PLUS | MINUS | ASTERISK | FSLASH | PERCENT;

//Array Declaration
Array		 -> (LARRAY NUMBER RARRAY)+ ArrAssignment?;	
ArrAssignment	 -> EQUALS LBRACE ArrContent RBRACE;
ArrContent	 -> (STRING|Char) (COMMA (STRING|Char))*;

//Calling Variable Array
VarArray	 ->(LARRAY (NUMBER|IDENTIFIER) RARRAY)*;

//Function? is exluded from LocalDecl
LocalDecl 	 -> DATATYPE Pointer? IDENTIFIER Array? DecAssignment?(COMMA Pointer? IDENTIFIER Array? DecAssignment?)* SEMICOL;
Assignment	 -> Identifier (EQUALS Expr)? SEMICOL;
DecAssignment	 -> EQUALS (Expr|LBRACE Char RBRACE);
Expr 		 -> Atom (ArithmeticOperator Atom)*;
Char		 -> QUOT CHARVALUE QUOT;
Atom 		 -> NUMBER | ((Pointer|REFOPER)? IDENTIFIER VarArray?) | LPAREN Expr RPAREN;

Identifier     -> INCREDECRE? IDENTIFIER INCREDECRE? (LPAREN ParPass RPAREN)?;  
ParPass	 -> REFOPER? IDENTIFIER (COMMA REFOPER? IDENTIFIER)*;
Function 	 -> LPAREN (Parameters|VOID)? RPAREN (SEMICOL|CodeBlock);
Parameters 	 -> (DATATYPE Pointer? IDENTIFIER ParArray?)(COMMA ((DATATYPE Pointer? IDENTIFIER ParArray?)|VARIABLEPARAMS))*;
ParArray	 -> (LARRAY NUMBER RARRAY)*;
CodeBlock	 -> BOOL|(LBRACE Statement* RBRACE);
Break		 -> BREAK SEMICOL;

Switch		 -> SWITCH LPAREN IDENTIFIER VarArray? RPAREN LBRACE SwitchCase RBRACE;
SwitchCase	 -> ((CASE CaseComp COLON)* (DEFAULT COLON)? Statement?)* Statement*;
CaseComp	 -> NUMBER|Char|STRING;

Statement	 -> Return|Switch|If|For|While|DoWhile|LocalDecl|Assignment|Break|BuiltInFunc;

If		 -> IF LPAREN (Condition) RPAREN IfForLoopBlock Else?;

//Condition	 -> BOOL|(IDENTIFIER RELOP (IDENTIFIER|NUMBER)) (LOGOP Condition)?;

Condition 	-> BOOL | (CondLogExpr (LOGOP CondLogExpr)*);
CondLogExpr 	-> CondExpr (RELOP CondExpr)*;
CondExpr	-> (IDENTIFIER VarArray?|NUMBER|STRING) | NOT? LPAREN Condition RPAREN;

//Condition	 -> BOOL|(IDENTIFIER RELOP (IDENTIFIER|NUMBER)) (LOGOP Condition)?;

Else	 	 -> ELSE IfForLoopBlock;
IfForLoopBlock -> (LBRACE Statement* RBRACE)|Statement;
For		 -> FOR LPAREN (ForDeclaration|ForAssignment(COMMA ForAssignment)*)? SEMICOL 
		    (Condition (COMMA Condition)*)? SEMICOL 
		    (IncDec (COMMA IncDec)*)? RPAREN IfForLoopBlock;

//ForDeclaration and ForAssignment has no SEMICOL at the end
ForDeclaration -> DATATYPE IDENTIFIER DecAssignment?(COMMA IDENTIFIER DecAssignment?)*;
ForAssignment	 -> IDENTIFIER EQUALS Expr;

While		 -> WHILE LPAREN (Condition (COMMA Condition)*) RPAREN WhileLoopBlock;
DoWhile	 -> DO WhileLoopBlock WHILE LPAREN (Condition (COMMA Condition)*) RPAREN SEMICOL;

//Prefix and Postfix
IncDec		 -> INCREDECRE? IDENTIFIER INCREDECRE?;

//WhileLoopBlock enforces the use of { and } as compared to IfForLoopBlock
WhileLoopBlock -> LBRACE Statement* RBRACE;
Printf 	 -> PRINTF LPAREN STRING (COMMA (IDENTIFIER VarArray?|NUMBER))* RPAREN SEMICOL;
Scanf		 -> SCANF LPAREN TYPESPEC COMMA REFOPER IDENTIFIER RPAREN SEMICOL;
Return		 -> RETURN Expr SEMICOL;

//getch(); and clrscr();
BuiltInFunc -> (Getch | Clrscr | Scanf | Printf);
Getch 		-> GETCH LPAREN RPAREN SEMICOL;
Clrscr  	-> CLRSCR LPAREN RPAREN SEMICOL;





