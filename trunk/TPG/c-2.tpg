<% @TinyPG Namespace="tccdotnet" Language="csharp" %>
DIRECTIVE	-> @"<.+?>";
DATATYPE	-> @"float|double|u?int|char|u?longlong|u?long|u?short";
INCLUDE	-> @"include";
VOID		-> @"void";
SWITCH		-> @"switch";
CASE		-> @"case";
IF 		-> @"if";
ELSE		-> @"else";
FOR		-> @"for";
WHILE		-> @"while";
DEFAULT	-> @"default";
RETURN		-> @"return";
SCANF		-> @"scanf";
PRINTF		-> @"printf";
DO		-> @"do";
BREAK         -> @"break";
TYPESPEC	-> @"@?\""%[dfsc]\""";
REFOPER	-> @"&";
IDENTIFIER   	-> @"[a-zA-Z_][a-zA-Z0-9_]*";
CHARIDENT	-> @"([a-zA-Z_]|[0-9_])";
CHARIDENT2	-> @"([a-zA-Z_][a-zA-Z_]|[0-9_][0-9_])|([a-zA-Z_][0-9_])|([0-9_][a-zA-Z_])";
ARTOPERATOR	-> @"\+|-|%|/|\*";
CASECHAR	-> @"[a-zA-Z_]*";
NUMBER		-> @"[0-9]+";
QUOT		-> @"\'";
DQUOT		-> @"\""";
POINTER	-> @"\*";
COMMA		-> @",";
EQUALS		-> @"=";
SEMICOL	-> @";";
COLON		-> @":";
SHARP 		-> @"#";
EOF		-> @"^$";
LPAREN		-> @"\(";
RPAREN		-> @"\)";
LBRACE		-> @"\{";
RBRACE		-> @"\}";
LARRAY		-> @"\[";
RARRAY		-> @"\]";
RELOP	       -> @">=|<=|==|!=|>|<";
LOGOP		-> @"&&|\|\|";
INCRE		-> @"\+\+|--";
BOOL		-> @"true|false";
NOT		-> @"!";
NULL		-> @"";
STRING        -> @"@?\""(\""\""|[^\""])*\""";
VARIABLEPARAMS -> @"\.\.\.";


[Skip]
WHITESPACE  	-> @"\s+";
[Skip]
EOL		-> @"[\n\r]";
[Skip]
COMMENTLINE  	-> @"//[^\n]*\n?";
[Skip]
COMMENTBLOCK 	-> @"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/";

/* === C-language CFG === */

Start 		 -> Header+ GlobalDecl* EOF;

/* Pre-processor directives */
Header 	 -> SHARP INCLUDE DIRECTIVE;

/*
 * Global declaration includes all declarations made outside functions.
 * -- Types: Variable, function, and function prototype declaration
 */

GlobalDecl 	 -> (DATATYPE|VOID) POINTER? IDENTIFIER (Function? 
				| (Array|DecAssignment)? (COMMA POINTER? IDENTIFIER Array? DecAssignment?)* SEMICOL);


/*GlobalDecl 	 -> (DATATYPE|VOID) POINTER? IDENTIFIER (Function? 
				| (Array|DecAssignment)? (COMMA POINTER? IDENTIFIER Array? DecAssignment?)* SEMICOL);*/

//Array Declaration
Array		 -> (LARRAY NUMBER RARRAY)+ ArAssignment?;	
ArAssignment	 -> EQUALS ArContent;
ArContent	 -> LBRACE STRING (COMMA STRING)* RBRACE;

//Calling Variable Array
VarArray	 ->(LARRAY (NUMBER|IDENTIFIER) RARRAY)*;

//Function? is exluded from LocalDecl
LocalDecl -> DATATYPE POINTER? IDENTIFIER Array? DecAssignment?(COMMA POINTER? IDENTIFIER Array? DecAssignment?)* SEMICOL;
Assignment	 -> IDENTIFIER EQUALS Expr SEMICOL;
DecAssignment	 -> EQUALS (Expr|Char);
Expr 		 -> Atom (ARTOPERATOR Atom)*;
Char		 -> QUOT (CHARIDENT|CHARIDENT2) QUOT;
Atom 		 -> NUMBER | ((POINTER|REFOPER)? IDENTIFIER VarArray?) | LPAREN Expr RPAREN;

Function 	 -> LPAREN (Parameters|VOID) RPAREN (SEMICOL|CodeBlock);
Parameters 	 -> ((DATATYPE POINTER? IDENTIFIER ParArray?)(COMMA ((DATATYPE POINTER? IDENTIFIER ParArray?)|VARIABLEPARAMS))*)?;
ParArray	 -> (LARRAY NUMBER RARRAY)*;
CodeBlock	 -> BOOL|(LBRACE Statement* RBRACE);
Break		 -> BREAK SEMICOL;

Switch		 -> SWITCH LPAREN IDENTIFIER VarArray? RPAREN LBRACE SwitchCase RBRACE;
SwitchCase	 -> ((CASE CaseComp COLON)* (DEFAULT COLON)? Statement?)* Statement*;
CaseComp	 -> NUMBER|Char;
Statement	 -> Return|Scanf|Printf|Switch|If|For|While|DoWhile|LocalDecl|Assignment|Break;

If		 -> IF LPAREN (Condition) RPAREN IfForLoopBlock Else?;
//Condition	 -> BOOL|(IDENTIFIER RELOP (IDENTIFIER|NUMBER)) (LOGOP Condition)?;

Condition 	-> BOOL | (CondLogExpr (LOGOP CondLogExpr)*);
CondLogExpr 	-> CondExpr (RELOP CondExpr)*;
CondExpr	-> (IDENTIFIER VarArray?|NUMBER|STRING) | NOT? LPAREN Condition RPAREN;

//Condition	 -> BOOL|(IDENTIFIER RELOP (IDENTIFIER|NUMBER)) (LOGOP Condition)?;
Else	 	 -> ELSE IfForLoopBlock;

IfForLoopBlock -> (LBRACE Statement* RBRACE)|Statement;

For		 -> FOR LPAREN (ForDeclaration|ForAssignment)? SEMICOL Condition? SEMICOL Increment? RPAREN IfForLoopBlock;
//ForDeclaration and ForAssignment has no SEMICOL at the end
ForDeclaration -> DATATYPE IDENTIFIER DecAssignment?(COMMA IDENTIFIER DecAssignment?)*;
ForAssignment	 -> IDENTIFIER EQUALS Expr;
Increment	 -> IDENTIFIER INCRE;

While		 -> WHILE LPAREN (Condition) RPAREN WhileLoopBlock;

DoWhile	 -> DO WhileLoopBlock WHILE LPAREN Condition RPAREN SEMICOL;

//WhileLoopBlock enforces the use of { and } as compared to IfForLoopBlock
WhileLoopBlock -> LBRACE Statement* RBRACE;

Printf 	 -> PRINTF LPAREN STRING (COMMA (IDENTIFIER VarArray?|NUMBER))* RPAREN SEMICOL;

Scanf		 -> SCANF LPAREN TYPESPEC COMMA REFOPER IDENTIFIER RPAREN SEMICOL;

Return		 -> RETURN Expr SEMICOL;
