Token: # 
 Type: SHARP        Line:   1 

Token: include 
 Type: INCLUDE      Line:   1 

Token: <stdio.h> 
 Type: DIRECTIVE    Line:   1 

Token: int 
 Type: DATATYPE     Line:   1 

Token: x 
 Type: IDENTIFIER   Line:   2 

Token: [ 
 Type: LARRAY       Line:   2 

Token: 20 
 Type: NUMBER       Line:   2 

Token: ] 
 Type: RARRAY       Line:   2 

Token: = 
 Type: EQUALS       Line:   2 

Token: { 
 Type: LBRACE       Line:   2 

Token: "X" 
 Type: STRING       Line:   2 

Token: } 
 Type: RBRACE       Line:   2 

Token: , 
 Type: COMMA        Line:   2 

Token: t 
 Type: IDENTIFIER   Line:   2 

Token: = 
 Type: EQUALS       Line:   2 

Token: 2 
 Type: CHARVALUE    Line:   2 

Token: , 
 Type: COMMA        Line:   2 

Token: c 
 Type: IDENTIFIER   Line:   2 

Token: , 
 Type: COMMA        Line:   2 

Token: f 
 Type: IDENTIFIER   Line:   2 

Token: , 
 Type: COMMA        Line:   2 

Token: g 
 Type: IDENTIFIER   Line:   2 

Token: , 
 Type: COMMA        Line:   2 

Token: e 
 Type: IDENTIFIER   Line:   2 

Token: = 
 Type: EQUALS       Line:   2 

Token: 2 
 Type: CHARVALUE    Line:   2 

Token: ; 
 Type: SEMICOL      Line:   2 

Token: int 
 Type: DATATYPE     Line:   2 

Token: y 
 Type: IDENTIFIER   Line:   2 

Token: ; 
 Type: SEMICOL      Line:   2 

Token: float 
 Type: DATATYPE     Line:   2 

Token: * 
 Type: ARTOPERATOR  Line:   3 

Token: we 
 Type: IDENTIFIER   Line:   3 

Token: = 
 Type: EQUALS       Line:   3 

Token: 2 
 Type: CHARVALUE    Line:   3 

Token: ; 
 Type: SEMICOL      Line:   3 

Token: char 
 Type: DATATYPE     Line:   3 

Token: str 
 Type: IDENTIFIER   Line:   4 

Token: [ 
 Type: LARRAY       Line:   4 

Token: 100 
 Type: NUMBER       Line:   4 

Token: ] 
 Type: RARRAY       Line:   4 

Token: = 
 Type: EQUALS       Line:   4 

Token: { 
 Type: LBRACE       Line:   4 

Token: "peter" 
 Type: STRING       Line:   4 

Token: , 
 Type: COMMA        Line:   4 

Token: "aivan" 
 Type: STRING       Line:   4 

Token: , 
 Type: COMMA        Line:   4 

Token: "pj" 
 Type: STRING       Line:   4 

Token: } 
 Type: RBRACE       Line:   4 

Token: ; 
 Type: SEMICOL      Line:   4 

Token: float 
 Type: DATATYPE     Line:   4 

Token: calc 
 Type: IDENTIFIER   Line:   6 

Token: ( 
 Type: LPAREN       Line:   6 

Token: int 
 Type: DATATYPE     Line:   6 

Token: oper 
 Type: IDENTIFIER   Line:   6 

Token: , 
 Type: COMMA        Line:   6 

Token: float 
 Type: DATATYPE     Line:   6 

Token: oper1 
 Type: IDENTIFIER   Line:   6 

Token: , 
 Type: COMMA        Line:   6 

Token: float 
 Type: DATATYPE     Line:   6 

Token: oper2 
 Type: IDENTIFIER   Line:   6 

Token: ) 
 Type: RPAREN       Line:   6 

Token: ; 
 Type: SEMICOL      Line:   6 

Token: int 
 Type: DATATYPE     Line:   6 

Token: main 
 Type: IDENTIFIER   Line:   8 

Token: ( 
 Type: LPAREN       Line:   8 

Token: int 
 Type: DATATYPE     Line:   8 

Token: * 
 Type: ARTOPERATOR  Line:   8 

Token: x 
 Type: IDENTIFIER   Line:   8 

Token: , 
 Type: COMMA        Line:   8 

Token: double 
 Type: DATATYPE     Line:   8 

Token: b 
 Type: IDENTIFIER   Line:   8 

Token: ) 
 Type: RPAREN       Line:   8 

Token: { 
 Type: LBRACE       Line:   8 

Token: int 
 Type: DATATYPE     Line:   9 

Token: y 
 Type: IDENTIFIER   Line:  10 

Token: = 
 Type: EQUALS       Line:  10 

Token: 2 
 Type: CHARVALUE    Line:  10 

Token: , 
 Type: COMMA        Line:  10 

Token: r 
 Type: IDENTIFIER   Line:  10 

Token: , 
 Type: COMMA        Line:  10 

Token: t 
 Type: IDENTIFIER   Line:  10 

Token: , 
 Type: COMMA        Line:  10 

Token: w 
 Type: IDENTIFIER   Line:  10 

Token: , 
 Type: COMMA        Line:  10 

Token: e 
 Type: IDENTIFIER   Line:  10 

Token: ; 
 Type: SEMICOL      Line:  10 

Token: z 
 Type: IDENTIFIER   Line:  10 

Token: = 
 Type: EQUALS       Line:  11 

Token: 4 
 Type: CHARVALUE    Line:  11 

Token: ; 
 Type: SEMICOL      Line:  11 

Token: z 
 Type: IDENTIFIER   Line:  11 

Token: = 
 Type: EQUALS       Line:  13 

Token: ( 
 Type: LPAREN       Line:  13 

Token: ( 
 Type: LPAREN       Line:  13 

Token: 5 
 Type: CHARVALUE    Line:  13 

Token: + 
 Type: ARTOPERATOR  Line:  13 

Token: 4 
 Type: CHARVALUE    Line:  13 

Token: ) 
 Type: RPAREN       Line:  13 

Token: * 
 Type: ARTOPERATOR  Line:  13 

Token: 2 
 Type: CHARVALUE    Line:  13 

Token: ) 
 Type: RPAREN       Line:  13 

Token: / 
 Type: ARTOPERATOR  Line:  13 

Token: 3 
 Type: CHARVALUE    Line:  13 

Token: ; 
 Type: SEMICOL      Line:  13 

Token: printf 
 Type: PRINTF       Line:  13 

Token: ( 
 Type: LPAREN       Line:  15 

Token: "hello world %d, %d" 
 Type: STRING       Line:  15 

Token: , 
 Type: COMMA        Line:  15 

Token: x 
 Type: IDENTIFIER   Line:  15 

Token: [ 
 Type: LARRAY       Line:  15 

Token: x 
 Type: IDENTIFIER   Line:  15 

Token: ] 
 Type: RARRAY       Line:  15 

Token: , 
 Type: COMMA        Line:  15 

Token: d 
 Type: IDENTIFIER   Line:  15 

Token: [ 
 Type: LARRAY       Line:  15 

Token: 12 
 Type: NUMBER       Line:  15 

Token: ] 
 Type: RARRAY       Line:  15 

Token: ) 
 Type: RPAREN       Line:  15 

Token: ; 
 Type: SEMICOL      Line:  15 

Token: if 
 Type: IF           Line:  15 

Token: ( 
 Type: LPAREN       Line:  17 

Token: x 
 Type: IDENTIFIER   Line:  17 

Token: == 
 Type: RELOP        Line:  17 

Token: 2 
 Type: CHARVALUE    Line:  17 

Token: ) 
 Type: RPAREN       Line:  17 

Token: { 
 Type: LBRACE       Line:  17 

Token: int 
 Type: DATATYPE     Line:  18 

Token: x 
 Type: IDENTIFIER   Line:  19 

Token: = 
 Type: EQUALS       Line:  19 

Token: 2 
 Type: CHARVALUE    Line:  19 

Token: , 
 Type: COMMA        Line:  19 

Token: c 
 Type: IDENTIFIER   Line:  19 

Token: = 
 Type: EQUALS       Line:  19 

Token: 2 
 Type: CHARVALUE    Line:  19 

Token: , 
 Type: COMMA        Line:  19 

Token: d 
 Type: IDENTIFIER   Line:  19 

Token: , 
 Type: COMMA        Line:  19 

Token: a 
 Type: IDENTIFIER   Line:  19 

Token: ; 
 Type: SEMICOL      Line:  19 

Token: p 
 Type: IDENTIFIER   Line:  19 

Token: = 
 Type: EQUALS       Line:  20 

Token: 2 
 Type: CHARVALUE    Line:  20 

Token: ; 
 Type: SEMICOL      Line:  20 

Token: switch 
 Type: SWITCH       Line:  20 

Token: ( 
 Type: LPAREN       Line:  21 

Token: dsd 
 Type: IDENTIFIER   Line:  21 

Token: ) 
 Type: RPAREN       Line:  21 

Token: { 
 Type: LBRACE       Line:  21 

Token: case 
 Type: CASE         Line:  22 

Token: 3 
 Type: CHARVALUE    Line:  23 

Token: : 
 Type: COLON        Line:  23 

Token: b 
 Type: IDENTIFIER   Line:  23 

Token: = 
 Type: EQUALS       Line:  24 

Token: 5 
 Type: CHARVALUE    Line:  24 

Token: + 
 Type: ARTOPERATOR  Line:  24 

Token: 2 
 Type: CHARVALUE    Line:  24 

Token: / 
 Type: ARTOPERATOR  Line:  24 

Token: 4 
 Type: CHARVALUE    Line:  24 

Token: ; 
 Type: SEMICOL      Line:  24 

Token: default 
 Type: DEFAULT      Line:  24 

Token: : 
 Type: COLON        Line:  26 

Token: int 
 Type: DATATYPE     Line:  26 

Token: c 
 Type: IDENTIFIER   Line:  27 

Token: = 
 Type: EQUALS       Line:  27 

Token: 5 
 Type: CHARVALUE    Line:  27 

Token: ; 
 Type: SEMICOL      Line:  27 

Token: } 
 Type: RBRACE       Line:  27 

Token: } 
 Type: RBRACE       Line:  28 

Token: switch 
 Type: SWITCH       Line:  30 

Token: ( 
 Type: LPAREN       Line:  32 

Token: q 
 Type: IDENTIFIER   Line:  32 

Token: ) 
 Type: RPAREN       Line:  32 

Token: { 
 Type: LBRACE       Line:  32 

Token: case 
 Type: CASE         Line:  33 

Token: 1 
 Type: CHARVALUE    Line:  34 

Token: : 
 Type: COLON        Line:  34 

Token: a 
 Type: IDENTIFIER   Line:  34 

Token: = 
 Type: EQUALS       Line:  35 

Token: 5 
 Type: CHARVALUE    Line:  35 

Token: ; 
 Type: SEMICOL      Line:  35 

Token: if 
 Type: IF           Line:  35 

Token: ( 
 Type: LPAREN       Line:  36 

Token: x 
 Type: IDENTIFIER   Line:  36 

Token: <= 
 Type: RELOP        Line:  36 

Token: 2 
 Type: CHARVALUE    Line:  36 

Token: ) 
 Type: RPAREN       Line:  36 

Token: { 
 Type: LBRACE       Line:  36 

Token: x 
 Type: IDENTIFIER   Line:  37 

Token: = 
 Type: EQUALS       Line:  38 

Token: 2 
 Type: CHARVALUE    Line:  38 

Token: ; 
 Type: SEMICOL      Line:  38 

Token: } 
 Type: RBRACE       Line:  38 

Token: case 
 Type: CASE         Line:  39 

Token: 2 
 Type: CHARVALUE    Line:  40 

Token: : 
 Type: COLON        Line:  40 

Token: switch 
 Type: SWITCH       Line:  40 

Token: ( 
 Type: LPAREN       Line:  41 

Token: dsd 
 Type: IDENTIFIER   Line:  41 

Token: ) 
 Type: RPAREN       Line:  41 

Token: { 
 Type: LBRACE       Line:  41 

Token: case 
 Type: CASE         Line:  42 

Token: 3 
 Type: CHARVALUE    Line:  43 

Token: : 
 Type: COLON        Line:  43 

Token: b 
 Type: IDENTIFIER   Line:  43 

Token: = 
 Type: EQUALS       Line:  44 

Token: 5 
 Type: CHARVALUE    Line:  44 

Token: + 
 Type: ARTOPERATOR  Line:  44 

Token: 2 
 Type: CHARVALUE    Line:  44 

Token: / 
 Type: ARTOPERATOR  Line:  44 

Token: 4 
 Type: CHARVALUE    Line:  44 

Token: ; 
 Type: SEMICOL      Line:  44 

Token: default 
 Type: DEFAULT      Line:  44 

Token: : 
 Type: COLON        Line:  46 

Token: int 
 Type: DATATYPE     Line:  46 

Token: c 
 Type: IDENTIFIER   Line:  47 

Token: = 
 Type: EQUALS       Line:  47 

Token: 5 
 Type: CHARVALUE    Line:  47 

Token: ; 
 Type: SEMICOL      Line:  47 

Token: } 
 Type: RBRACE       Line:  47 

Token: } 
 Type: RBRACE       Line:  48 

Token: if 
 Type: IF           Line:  49 

Token: ( 
 Type: LPAREN       Line:  52 

Token: x 
 Type: IDENTIFIER   Line:  52 

Token: == 
 Type: RELOP        Line:  52 

Token: 2 
 Type: CHARVALUE    Line:  52 

Token: ) 
 Type: RPAREN       Line:  52 

Token: x 
 Type: IDENTIFIER   Line:  52 

Token: = 
 Type: EQUALS       Line:  53 

Token: 23 
 Type: NUMBER       Line:  53 

Token: ; 
 Type: SEMICOL      Line:  53 

Token: if 
 Type: IF           Line:  53 

Token: ( 
 Type: LPAREN       Line:  54 

Token: x 
 Type: IDENTIFIER   Line:  54 

Token: <= 
 Type: RELOP        Line:  54 

Token: 2 
 Type: CHARVALUE    Line:  54 

Token: ) 
 Type: RPAREN       Line:  54 

Token: { 
 Type: LBRACE       Line:  54 

Token: x 
 Type: IDENTIFIER   Line:  55 

Token: = 
 Type: EQUALS       Line:  56 

Token: 23 
 Type: NUMBER       Line:  56 

Token: ; 
 Type: SEMICOL      Line:  56 

Token: fd 
 Type: IDENTIFIER   Line:  56 

Token: = 
 Type: EQUALS       Line:  57 

Token: 233 
 Type: NUMBER       Line:  57 

Token: ; 
 Type: SEMICOL      Line:  57 

Token: } 
 Type: RBRACE       Line:  57 

Token: else 
 Type: ELSE         Line:  58 

Token: if 
 Type: IF           Line:  59 

Token: ( 
 Type: LPAREN       Line:  60 

Token: m 
 Type: IDENTIFIER   Line:  60 

Token: != 
 Type: RELOP        Line:  60 

Token: 90 
 Type: NUMBER       Line:  60 

Token: ) 
 Type: RPAREN       Line:  60 

Token: k 
 Type: IDENTIFIER   Line:  60 

Token: = 
 Type: EQUALS       Line:  61 

Token: 2 
 Type: CHARVALUE    Line:  61 

Token: ; 
 Type: SEMICOL      Line:  61 

Token: else 
 Type: ELSE         Line:  61 

Token: oo 
 Type: IDENTIFIER   Line:  62 

Token: = 
 Type: EQUALS       Line:  63 

Token: 9999 
 Type: NUMBER       Line:  63 

Token: ; 
 Type: SEMICOL      Line:  63 

Token: if 
 Type: IF           Line:  63 

Token: ( 
 Type: LPAREN       Line:  66 

Token: xxx 
 Type: IDENTIFIER   Line:  66 

Token: != 
 Type: RELOP        Line:  66 

Token: 111 
 Type: NUMBER       Line:  66 

Token: ) 
 Type: RPAREN       Line:  66 

Token: xxx 
 Type: IDENTIFIER   Line:  66 

Token: = 
 Type: EQUALS       Line:  67 

Token: 69 
 Type: NUMBER       Line:  67 

Token: ; 
 Type: SEMICOL      Line:  67 

Token: else 
 Type: ELSE         Line:  67 

Token: { 
 Type: LBRACE       Line:  68 

Token: if 
 Type: IF           Line:  69 

Token: ( 
 Type: LPAREN       Line:  70 

Token: xxx 
 Type: IDENTIFIER   Line:  70 

Token: != 
 Type: RELOP        Line:  70 

Token: 222 
 Type: NUMBER       Line:  70 

Token: ) 
 Type: RPAREN       Line:  70 

Token: xxx 
 Type: IDENTIFIER   Line:  70 

Token: = 
 Type: EQUALS       Line:  71 

Token: 88 
 Type: NUMBER       Line:  71 

Token: ; 
 Type: SEMICOL      Line:  71 

Token: } 
 Type: RBRACE       Line:  71 

Token: p 
 Type: IDENTIFIER   Line:  72 

Token: = 
 Type: EQUALS       Line:  74 

Token: 0 
 Type: CHARVALUE    Line:  74 

Token: ; 
 Type: SEMICOL      Line:  74 

Token: for 
 Type: FOR          Line:  74 

Token: ( 
 Type: LPAREN       Line:  76 

Token: ulonglong 
 Type: DATATYPE     Line:  76 

Token: ctr 
 Type: IDENTIFIER   Line:  76 

Token: = 
 Type: EQUALS       Line:  76 

Token: 23 
 Type: NUMBER       Line:  76 

Token: ; 
 Type: SEMICOL      Line:  76 

Token: x 
 Type: IDENTIFIER   Line:  76 

Token: > 
 Type: RELOP        Line:  76 

Token: 9 
 Type: CHARVALUE    Line:  76 

Token: ; 
 Type: SEMICOL      Line:  76 

Token: x 
 Type: IDENTIFIER   Line:  76 

Token: ++ 
 Type: INCRE        Line:  76 

Token: ) 
 Type: RPAREN       Line:  76 

Token: { 
 Type: LBRACE       Line:  76 

Token: x 
 Type: IDENTIFIER   Line:  77 

Token: = 
 Type: EQUALS       Line:  78 

Token: 2 
 Type: CHARVALUE    Line:  78 

Token: ; 
 Type: SEMICOL      Line:  78 

Token: while 
 Type: WHILE        Line:  78 

Token: ( 
 Type: LPAREN       Line:  79 

Token: m 
 Type: IDENTIFIER   Line:  79 

Token: != 
 Type: RELOP        Line:  79 

Token: 0 
 Type: CHARVALUE    Line:  79 

Token: ) 
 Type: RPAREN       Line:  79 

Token: { 
 Type: LBRACE       Line:  79 

Token: m 
 Type: IDENTIFIER   Line:  80 

Token: = 
 Type: EQUALS       Line:  81 

Token: 554545 
 Type: NUMBER       Line:  81 

Token: ; 
 Type: SEMICOL      Line:  81 

Token: } 
 Type: RBRACE       Line:  81 

Token: } 
 Type: RBRACE       Line:  82 

Token: while 
 Type: WHILE        Line:  83 

Token: ( 
 Type: LPAREN       Line:  85 

Token: x 
 Type: IDENTIFIER   Line:  85 

Token: == 
 Type: RELOP        Line:  85 

Token: 8 
 Type: CHARVALUE    Line:  85 

Token: || 
 Type: LOGOP        Line:  85 

Token: jjj 
 Type: IDENTIFIER   Line:  85 

Token: <= 
 Type: RELOP        Line:  85 

Token: 23 
 Type: NUMBER       Line:  85 

Token: ) 
 Type: RPAREN       Line:  85 

Token: { 
 Type: LBRACE       Line:  85 

Token: char 
 Type: DATATYPE     Line:  86 

Token: lklskdk 
 Type: IDENTIFIER   Line:  87 

Token: = 
 Type: EQUALS       Line:  87 

Token: 23287382 
 Type: NUMBER       Line:  87 

Token: ; 
 Type: SEMICOL      Line:  87 

Token: if 
 Type: IF           Line:  87 

Token: ( 
 Type: LPAREN       Line:  88 

Token: ( 
 Type: LPAREN       Line:  88 

Token: x 
 Type: IDENTIFIER   Line:  88 

Token: < 
 Type: RELOP        Line:  88 

Token: 2 
 Type: CHARVALUE    Line:  88 

Token: ) 
 Type: RPAREN       Line:  88 

Token: && 
 Type: LOGOP        Line:  88 

Token: y 
 Type: IDENTIFIER   Line:  88 

Token: < 
 Type: RELOP        Line:  88 

Token: 2 
 Type: CHARVALUE    Line:  88 

Token: || 
 Type: LOGOP        Line:  88 

Token: ( 
 Type: LPAREN       Line:  88 

Token: x 
 Type: IDENTIFIER   Line:  88 

Token: != 
 Type: RELOP        Line:  88 

Token: x 
 Type: IDENTIFIER   Line:  88 

Token: ) 
 Type: RPAREN       Line:  88 

Token: ) 
 Type: RPAREN       Line:  88 

Token: lll 
 Type: IDENTIFIER   Line:  88 

Token: = 
 Type: EQUALS       Line:  89 

Token: 999 
 Type: NUMBER       Line:  89 

Token: ; 
 Type: SEMICOL      Line:  89 

Token: } 
 Type: RBRACE       Line:  89 

Token: for 
 Type: FOR          Line:  91 

Token: ( 
 Type: LPAREN       Line:  93 

Token: ; 
 Type: SEMICOL      Line:  93 

Token: ; 
 Type: SEMICOL      Line:  93 

Token: ) 
 Type: RPAREN       Line:  93 

Token: { 
 Type: LBRACE       Line:  93 

Token: } 
 Type: RBRACE       Line:  93 

Token: for 
 Type: FOR          Line:  93 

Token: ( 
 Type: LPAREN       Line:  94 

Token: x 
 Type: IDENTIFIER   Line:  94 

Token: = 
 Type: EQUALS       Line:  94 

Token: 2 
 Type: CHARVALUE    Line:  94 

Token: ; 
 Type: SEMICOL      Line:  94 

Token: ; 
 Type: SEMICOL      Line:  94 

Token: ) 
 Type: RPAREN       Line:  94 

Token: { 
 Type: LBRACE       Line:  94 

Token: } 
 Type: RBRACE       Line:  94 

Token: for 
 Type: FOR          Line:  94 

Token: ( 
 Type: LPAREN       Line:  95 

Token: ; 
 Type: SEMICOL      Line:  95 

Token: x 
 Type: IDENTIFIER   Line:  95 

Token: >= 
 Type: RELOP        Line:  95 

Token: 2 
 Type: CHARVALUE    Line:  95 

Token: ; 
 Type: SEMICOL      Line:  95 

Token: ) 
 Type: RPAREN       Line:  95 

Token: { 
 Type: LBRACE       Line:  95 

Token: } 
 Type: RBRACE       Line:  95 

Token: for 
 Type: FOR          Line:  95 

Token: ( 
 Type: LPAREN       Line:  96 

Token: ; 
 Type: SEMICOL      Line:  96 

Token: ; 
 Type: SEMICOL      Line:  96 

Token: x 
 Type: IDENTIFIER   Line:  96 

Token: -- 
 Type: INCRE        Line:  96 

Token: ) 
 Type: RPAREN       Line:  96 

Token: { 
 Type: LBRACE       Line:  96 

Token: } 
 Type: RBRACE       Line:  96 

Token: do 
 Type: DO           Line:  96 

Token: { 
 Type: LBRACE       Line:  98 

Token: x 
 Type: IDENTIFIER   Line:  99 

Token: = 
 Type: EQUALS       Line: 100 

Token: 2 
 Type: CHARVALUE    Line: 100 

Token: ; 
 Type: SEMICOL      Line: 100 

Token: } 
 Type: RBRACE       Line: 100 

Token: while 
 Type: WHILE        Line: 101 

Token: ( 
 Type: LPAREN       Line: 102 

Token: x 
 Type: IDENTIFIER   Line: 102 

Token: > 
 Type: RELOP        Line: 102 

Token: 0 
 Type: CHARVALUE    Line: 102 

Token: ) 
 Type: RPAREN       Line: 102 

Token: ; 
 Type: SEMICOL      Line: 102 

Token: while 
 Type: WHILE        Line: 102 

Token: ( 
 Type: LPAREN       Line: 104 

Token: x 
 Type: IDENTIFIER   Line: 104 

Token: == 
 Type: RELOP        Line: 104 

Token: 90 
 Type: NUMBER       Line: 104 

Token: ) 
 Type: RPAREN       Line: 104 

Token: { 
 Type: LBRACE       Line: 104 

Token: x 
 Type: IDENTIFIER   Line: 105 

Token: = 
 Type: EQUALS       Line: 106 

Token: 2 
 Type: CHARVALUE    Line: 106 

Token: ; 
 Type: SEMICOL      Line: 106 

Token: } 
 Type: RBRACE       Line: 106 

Token: printf 
 Type: PRINTF       Line: 107 

Token: ( 
 Type: LPAREN       Line: 109 

Token: "hello %d, %d" 
 Type: STRING       Line: 109 

Token: , 
 Type: COMMA        Line: 109 

Token: x 
 Type: IDENTIFIER   Line: 109 

Token: [ 
 Type: LARRAY       Line: 109 

Token: x 
 Type: IDENTIFIER   Line: 109 

Token: ] 
 Type: RARRAY       Line: 109 

Token: , 
 Type: COMMA        Line: 109 

Token: d 
 Type: IDENTIFIER   Line: 109 

Token: [ 
 Type: LARRAY       Line: 109 

Token: 12 
 Type: NUMBER       Line: 109 

Token: ] 
 Type: RARRAY       Line: 109 

Token: ) 
 Type: RPAREN       Line: 109 

Token: ; 
 Type: SEMICOL      Line: 109 

Token: scanf 
 Type: SCANF        Line: 109 

Token: ( 
 Type: LPAREN       Line: 110 

Token: "%d" 
 Type: TYPESPEC     Line: 110 

Token: , 
 Type: COMMA        Line: 110 

Token: & 
 Type: REFOPER      Line: 110 

Token: x 
 Type: IDENTIFIER   Line: 110 

Token: ) 
 Type: RPAREN       Line: 110 

Token: ; 
 Type: SEMICOL      Line: 110 

Token: return 
 Type: RETURN       Line: 110 

Token: v 
 Type: IDENTIFIER   Line: 112 

Token: ; 
 Type: SEMICOL      Line: 112 

Token: return 
 Type: RETURN       Line: 112 

Token: 2 
 Type: CHARVALUE    Line: 113 

Token: ; 
 Type: SEMICOL      Line: 113 

Token: return 
 Type: RETURN       Line: 113 

Token: x 
 Type: IDENTIFIER   Line: 114 

Token: + 
 Type: ARTOPERATOR  Line: 114 

Token: 2 
 Type: CHARVALUE    Line: 114 

Token: ; 
 Type: SEMICOL      Line: 114 

Token: return 
 Type: RETURN       Line: 114 

Token: g 
 Type: IDENTIFIER   Line: 115 

Token: + 
 Type: ARTOPERATOR  Line: 115 

Token: k 
 Type: IDENTIFIER   Line: 115 

Token: ; 
 Type: SEMICOL      Line: 115 

Token: return 
 Type: RETURN       Line: 115 

Token: ( 
 Type: LPAREN       Line: 116 

Token: j 
 Type: IDENTIFIER   Line: 116 

Token: + 
 Type: ARTOPERATOR  Line: 116 

Token: k 
 Type: IDENTIFIER   Line: 116 

Token: ) 
 Type: RPAREN       Line: 116 

Token: ; 
 Type: SEMICOL      Line: 116 

Token: return 
 Type: RETURN       Line: 116 

Token: ( 
 Type: LPAREN       Line: 117 

Token: 2 
 Type: CHARVALUE    Line: 117 

Token: - 
 Type: ARTOPERATOR  Line: 117 

Token: s 
 Type: IDENTIFIER   Line: 117 

Token: * 
 Type: ARTOPERATOR  Line: 117 

Token: f 
 Type: IDENTIFIER   Line: 117 

Token: - 
 Type: ARTOPERATOR  Line: 117 

Token: ( 
 Type: LPAREN       Line: 117 

Token: g 
 Type: IDENTIFIER   Line: 117 

Token: + 
 Type: ARTOPERATOR  Line: 117 

Token: p 
 Type: IDENTIFIER   Line: 117 

Token: ) 
 Type: RPAREN       Line: 117 

Token: ) 
 Type: RPAREN       Line: 117 

Token: ; 
 Type: SEMICOL      Line: 117 

Token: return 
 Type: RETURN       Line: 117 

Token: f 
 Type: IDENTIFIER   Line: 118 

Token: * 
 Type: ARTOPERATOR  Line: 118 

Token: ( 
 Type: LPAREN       Line: 118 

Token: g 
 Type: IDENTIFIER   Line: 118 

Token: ) 
 Type: RPAREN       Line: 118 

Token: ; 
 Type: SEMICOL      Line: 118 

Token: } 
 Type: RBRACE       Line: 118 

Token: long 
 Type: DATATYPE     Line: 119 

Token: func 
 Type: IDENTIFIER   Line: 121 

Token: ( 
 Type: LPAREN       Line: 121 

Token: ) 
 Type: RPAREN       Line: 121 

Token: { 
 Type: LBRACE       Line: 121 

Token: float 
 Type: DATATYPE     Line: 121 

Token: arr 
 Type: IDENTIFIER   Line: 122 

Token: [ 
 Type: LARRAY       Line: 122 

Token: 100 
 Type: NUMBER       Line: 122 

Token: ] 
 Type: RARRAY       Line: 122 

Token: [ 
 Type: LARRAY       Line: 122 

Token: 3 
 Type: CHARVALUE    Line: 122 

Token: ] 
 Type: RARRAY       Line: 122 

Token: ; 
 Type: SEMICOL      Line: 122 

Token: } 
 Type: RBRACE       Line: 122 

Token: long 
 Type: DATATYPE     Line: 123 

Token: hotdog 
 Type: IDENTIFIER   Line: 125 

Token: ( 
 Type: LPAREN       Line: 125 

Token: int 
 Type: DATATYPE     Line: 125 

Token: x 
 Type: IDENTIFIER   Line: 125 

Token: ) 
 Type: RPAREN       Line: 125 

Token: { 
 Type: LBRACE       Line: 125 

Token: printf 
 Type: PRINTF       Line: 126 

Token: ( 
 Type: LPAREN       Line: 127 

Token: "hi" 
 Type: STRING       Line: 127 

Token: ) 
 Type: RPAREN       Line: 127 

Token: ; 
 Type: SEMICOL      Line: 127 

Token: int 
 Type: DATATYPE     Line: 127 

Token: * 
 Type: ARTOPERATOR  Line: 128 

Token: a 
 Type: IDENTIFIER   Line: 128 

Token: , 
 Type: COMMA        Line: 128 

Token: b 
 Type: IDENTIFIER   Line: 128 

Token: , 
 Type: COMMA        Line: 128 

Token: c 
 Type: IDENTIFIER   Line: 128 

Token: ; 
 Type: SEMICOL      Line: 128 

Token: a 
 Type: IDENTIFIER   Line: 128 

Token: = 
 Type: EQUALS       Line: 129 

Token: & 
 Type: REFOPER      Line: 129 

Token: b 
 Type: IDENTIFIER   Line: 129 

Token: ; 
 Type: SEMICOL      Line: 129 

Token: b 
 Type: IDENTIFIER   Line: 129 

Token: = 
 Type: EQUALS       Line: 130 

Token: 10 
 Type: NUMBER       Line: 130 

Token: ; 
 Type: SEMICOL      Line: 130 

Token: c 
 Type: IDENTIFIER   Line: 130 

Token: = 
 Type: EQUALS       Line: 131 

Token: * 
 Type: ARTOPERATOR  Line: 131 

Token: a 
 Type: IDENTIFIER   Line: 131 

Token: ; 
 Type: SEMICOL      Line: 131 

Token: } 
 Type: RBRACE       Line: 131 

